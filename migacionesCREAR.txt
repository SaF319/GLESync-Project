1. Crear el Proyecto Laravel 12
bash
# Desde el directorio donde quieres crear el proyecto
composer create-project laravel/laravel event-organizer
cd event-organizer
2. Configurar Base de Datos
En tu archivo .env configura la conexión a MySQL:

env
DB_CONNECTION=mysql
DB_HOST=127.0.0.1  # O el nombre de tu contenedor MySQL
DB_PORT=3306
DB_DATABASE=event_organizer
DB_USERNAME=root
DB_PASSWORD=tu_password
3. Crear Migraciones
bash
php artisan make:migration create_organizers_table
php artisan make:migration create_events_table
php artisan make:migration create_attendees_table
Migración de Organizadores (database/migrations/xxxx_create_organizers_table.php):

php
public function up()
{
    Schema::create('organizers', function (Blueprint $table) {
        $table->id();
        $table->foreignId('user_id')->constrained()->onDelete('cascade');
        $table->string('organization_name');
        $table->text('description')->nullable();
        $table->string('phone');
        $table->string('address');
        $table->timestamps();
    });
}
Migración de Eventos (database/migrations/xxxx_create_events_table.php):

php
public function up()
{
    Schema::create('events', function (Blueprint $table) {
        $table->id();
        $table->foreignId('organizer_id')->constrained()->onDelete('cascade');
        $table->string('title');
        $table->text('description');
        $table->dateTime('date_time');
        $table->string('location');
        $table->integer('capacity');
        $table->decimal('price', 8, 2)->default(0);
        $table->enum('status', ['active', 'cancelled', 'completed'])->default('active');
        $table->timestamps();
    });
}
Migración de Asistentes (database/migrations/xxxx_create_attendees_table.php):

php
public function up()
{
    Schema::create('attendees', function (Blueprint $table) {
        $table->id();
        $table->foreignId('event_id')->constrained()->onDelete('cascade');
        $table->foreignId('user_id')->constrained()->onDelete('cascade');
        $table->integer('ticket_quantity')->default(1);
        $table->decimal('total_amount', 8, 2);
        $table->enum('status', ['confirmed', 'cancelled', 'pending'])->default('confirmed');
        $table->timestamps();
    });
}
Ejecutar migraciones:

bash
php artisan migrate
4. Crear Modelos
Modelo User (extender el existente):

php
// app/Models/User.php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    use HasFactory, Notifiable;

    protected $fillable = [
        'name',
        'email',
        'password',
        'role', // 'admin', 'organizer', 'user'
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    public function isAdmin()
    {
        return $this->role === 'admin';
    }

    public function isOrganizer()
    {
        return $this->role === 'organizer';
    }

    public function organizer()
    {
        return $this->hasOne(Organizer::class);
    }

    public function attendees()
    {
        return $this->hasMany(Attendee::class);
    }
}
Modelo Organizer (app/Models/Organizer.php):

php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Organizer extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'organization_name',
        'description',
        'phone',
        'address'
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function events()
    {
        return $this->hasMany(Event::class);
    }
}
Modelo Event (app/Models/Event.php):

php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Event extends Model
{
    use HasFactory;

    protected $fillable = [
        'organizer_id',
        'title',
        'description',
        'date_time',
        'location',
        'capacity',
        'price',
        'status'
    ];

    protected $casts = [
        'date_time' => 'datetime',
        'price' => 'decimal:2'
    ];

    public function organizer()
    {
        return $this->belongsTo(Organizer::class);
    }

    public function attendees()
    {
        return $this->hasMany(Attendee::class);
    }
}
5. Crear Controladores
bash
php artisan make:controller Admin/UserController --resource
php artisan make:controller Organizer/EventController --resource
php artisan make:controller EventController --resource
Controlador de Eventos para Organizadores (app/Http/Controllers/Organizer/EventController.php):

php
namespace App\Http\Controllers\Organizer;

use App\Http\Controllers\Controller;
use App\Models\Event;
use Illuminate\Http\Request;

class EventController extends Controller
{
    public function index()
    {
        $events = Event::where('organizer_id', auth()->user()->organizer->id)
                     ->latest()
                     ->paginate(10);
        return view('organizer.events.index', compact('events'));
    }

    public function create()
    {
        return view('organizer.events.create');
    }

    public function store(Request $request)
    {
        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'required|string',
            'date_time' => 'required|date',
            'location' => 'required|string|max:255',
            'capacity' => 'required|integer|min:1',
            'price' => 'required|numeric|min:0'
        ]);

        Event::create([
            'organizer_id' => auth()->user()->organizer->id,
            ...$validated
        ]);

        return redirect()->route('organizer.events.index')
                         ->with('success', 'Evento creado exitosamente');
    }

    public function edit(Event $event)
    {
        $this->authorize('update', $event);
        return view('organizer.events.edit', compact('event'));
    }

    public function update(Request $request, Event $event)
    {
        $this->authorize('update', $event);
        
        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'required|string',
            'date_time' => 'required|date',
            'location' => 'required|string|max:255',
            'capacity' => 'required|integer|min:1',
            'price' => 'required|numeric|min:0'
        ]);

        $event->update($validated);

        return redirect()->route('organizer.events.index')
                         ->with('success', 'Evento actualizado exitosamente');
    }

    public function destroy(Event $event)
    {
        $this->authorize('delete', $event);
        $event->delete();
        
        return redirect()->route('organizer.events.index')
                         ->with('success', 'Evento eliminado exitosamente');
    }
}
6. Crear Policies para Autorización
bash
php artisan make:policy EventPolicy --model=Event
Event Policy (app/Policies/EventPolicy.php):

php
namespace App\Policies;

use App\Models\Event;
use App\Models\User;
use Illuminate\Auth\Access\Response;

class EventPolicy
{
    public function viewAny(User $user)
    {
        return $user->isAdmin() || $user->isOrganizer();
    }

    public function view(User $user, Event $event)
    {
        if ($user->isAdmin()) {
            return true;
        }
        
        return $user->isOrganizer() && $event->organizer_id === $user->organizer->id;
    }

    public function create(User $user)
    {
        return $user->isOrganizer();
    }

    public function update(User $user, Event $event)
    {
        if ($user->isAdmin()) {
            return true;
        }
        
        return $user->isOrganizer() && $event->organizer_id === $user->organizer->id;
    }

    public function delete(User $user, Event $event)
    {
        if ($user->isAdmin()) {
            return true;
        }
        
        return $user->isOrganizer() && $event->organizer_id === $user->organizer->id;
    }
}
7. Configurar Rutas
routes/web.php:

php
use App\Http\Controllers\EventController;
use App\Http\Controllers\Organizer\EventController as OrganizerEventController;
use App\Http\Controllers\Admin\UserController;

// Rutas públicas
Route::get('/', function () {
    return view('welcome');
});

// Rutas de autenticación
Auth::routes();

// Rutas para usuarios normales
Route::middleware(['auth'])->group(function () {
    Route::get('/events', [EventController::class, 'index'])->name('events.index');
    Route::get('/events/{event}', [EventController::class, 'show'])->name('events.show');
});

// Rutas para organizadores
Route::middleware(['auth', 'organizer'])->prefix('organizer')->name('organizer.')->group(function () {
    Route::resource('events', OrganizerEventController::class);
});

// Rutas para administradores
Route::middleware(['auth', 'admin'])->prefix('admin')->name('admin.')->group(function () {
    Route::resource('users', UserController::class);
    Route::get('/events', [EventController::class, 'adminIndex'])->name('events.index');
});
8. Middleware Personalizado
Crear middleware para roles:

bash
php artisan make:middleware CheckOrganizer
php artisan make:middleware CheckAdmin
app/Http/Middleware/CheckOrganizer.php:

php
namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class CheckOrganizer
{
    public function handle(Request $request, Closure $next): Response
    {
        if (!auth()->check() || !auth()->user()->isOrganizer()) {
            abort(403, 'No tienes permisos para acceder a esta sección');
        }

        return $next($request);
    }
}
Registrar middleware en app/Http/Kernel.php:

php
protected $routeMiddleware = [
    // ...
    'organizer' => \App\Http\Middleware\CheckOrganizer::class,
    'admin' => \App\Http\Middleware\CheckAdmin::class,
];
9. Seeders para Datos de Prueba
bash
php artisan make:seeder AdminUserSeeder
php artisan make:seeder OrganizerSeeder
database/seeders/AdminUserSeeder.php:

php
namespace Database\Seeders;

use App\Models\User;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\Hash;

class AdminUserSeeder extends Seeder
{
    public function run()
    {
        User::create([
            'name' => 'Administrador',
            'email' => 'admin@eventos.com',
            'password' => Hash::make('password'),
            'role' => 'admin'
        ]);
    }
}
10. Ejecutar la Aplicación
bash
# Ejecutar migraciones con seeders
php artisan migrate --seed

# Iniciar el servidor
php artisan serve
¡Listo! Ahora tienes una base sólida para tu aplicación de organización de eventos con Laravel 12. Recuerda:

Personalizar las vistas según tus necesidades

Agregar validaciones adicionales

Implementar el sistema de tickets/pagos si es necesario

Agregar más funcionalidades como categorías de eventos, etc.

¿Te gustaría que profundice en algún aspecto específico?

mira esta seria la base de datos que deseariamos implementaren este proyecto de laravel
¡Perfecto! Veo que tienes una estructura de base de datos bien definida. Analizando tu diagrama, te ayudo a implementar esta estructura en Laravel 12.

Estructura de Base de Datos (Según tu Diagrama)
Tus tablas principales son:

users (ya existe por defecto en Laravel)

organizers

events

event_user (tabla pivote para asistentes)

categories

category_event (tabla pivote)

1. Migraciones
Migración de Categorías
bash
php
CREATE TABLE Usuario (
id_usuario INT AUTO_INCREMENT,
nombre VARCHAR(100) NOT NULL,
mail VARCHAR(100) UNIQUE NOT NULL PRIMARY KEY,
contraseña VARCHAR(100) NOT NULL
);

CREATE TABLE Organizador (
mail VARCHAR(100) PRIMARY KEY,
contacto VARCHAR(200),
FOREIGN KEY (mail) REFERENCES mail(Usuario)
);

CREATE TABLE Participante (
mail VARCHAR(100) PRIMARY KEY,
FOREIGN KEY (mail) REFERENCES mail(Usuario)
);

CREATE TABLE Evento (
mail VARCHAR(100) AUTO_INCREMENT PRIMARY KEY,
titulo VARCHAR(200) NOT NULL,
ubicacion VARCHAR(200),
descripcion TEXT
);

CREATE TABLE FechaHora (
PRIMARY KEY (mail, fechaHora),
    	mail VARCHAR(100),
    	fechaHora DATETIME NOT NULL,
    	FOREIGN KEY (id_evento) REFERENCES id_evento(Evento)
);

CREATE TABLE Interactua (
PRIMARY KEY(mail, id_usuario),
id_evento INT,
    	mail VARCHAR(100),
    	comentarios TEXT,
    	puntaje INT,
    	visitado BOOLEAN,
    	FOREIGN KEY (id_evento) REFERENCES id_evento(Evento),
FOREIGN KEY (id_usuario) REFERENCES id_usuario(Usuario)
);

CREATE TABLE Comentarios (
PRIMARY KEY (id_evento, mail, comentario),    
id_evento INT,
mail VARCHAR(100),
comentario TEXT NOT NULL,
FOREIGN KEY (id_evento) REFERENCES id_evento(Evento),
FOREIGN KEY (mail) REFERENCES mail(Usuario)
);

CREATE TABLE Crea (
PRIMARY KEY (id_evento, mail),
id_evento INT,
mail VARCHAR(100),
FOREIGN KEY (id_evento) REFERENCES id_evento(Evento),
FOREIGN KEY (mail) REFERENCES mail(Organizador)
);

CREATE TABLE Categoria (
id_categoria INT AUTO_INCREMENT PRIMARY KEY,
nombreCategoria VARCHAR(100) NOT NULL
);

CREATE TABLE Categoria_Evento (
PRIMARY KEY (id_categoria, id_evento),
id_categoria INT,
id_evento INT,
FOREIGN KEY (id_categoria) REFERENCES id_categoria(Categoria),
FOREIGN KEY (id_evento) REFERENCES id_evento(Evento)
);

CREATE TABLE Prefiere (
PRIMARY KEY (mail, id_categoria),
mail VARCHAR(100),
id_categoria INT,
FOREIGN KEY (id_usuario) REFERENCES id_usuario(Usuario),
FOREIGN KEY (id_categoria) REFERENCES id_categoria(Categoria)
);




asi la pensamos nosotros
Implementación de la Base de Datos en Laravel 12
Veo que tienes una estructura de base de datos bien definida. Voy a adaptarla a las convenciones de Laravel y crear todas las migraciones, modelos y relaciones necesarias.

1. Migraciones
A. Migración de Usuarios (modificar la existente)
bash
php artisan make:migration modify_users_table
database/migrations/xxxx_modify_users_table.php:

php
public function up()
{
    Schema::table('users', function (Blueprint $table) {
        $table->dropColumn('email_verified_at');
        $table->dropColumn('remember_token');
        $table->string('mail', 100)->unique()->change();
        $table->renameColumn('email', 'mail');
        $table->renameColumn('name', 'nombre');
        $table->renameColumn('password', 'contraseña');
    });
}

public function down()
{
    Schema::table('users', function (Blueprint $table) {
        $table->timestamp('email_verified_at')->nullable();
        $table->rememberToken();
        $table->string('email')->unique()->change();
        $table->renameColumn('mail', 'email');
        $table->renameColumn('nombre', 'name');
        $table->renameColumn('contraseña', 'password');
    });
}
B. Migración de Organizadores
bash
php artisan make:migration create_organizadores_table
database/migrations/xxxx_create_organizadores_table.php:

php
public function up()
{
    Schema::create('organizadores', function (Blueprint $table) {
        $table->string('mail', 100)->primary();
        $table->string('contacto', 200);
        $table->timestamps();
        
        $table->foreign('mail')->references('mail')->on('users')->onDelete('cascade');
    });
}

public function down()
{
    Schema::dropIfExists('organizadores');
}
C. Migración de Participantes
bash
php artisan make:migration create_participantes_table
database/migrations/xxxx_create_participantes_table.php:

php
public function up()
{
    Schema::create('participantes', function (Blueprint $table) {
        $table->string('mail', 100)->primary();
        $table->timestamps();
        
        $table->foreign('mail')->references('mail')->on('users')->onDelete('cascade');
    });
}

public function down()
{
    Schema::dropIfExists('participantes');
}
D. Migración de Eventos
bash
php artisan make:migration create_eventos_table
database/migrations/xxxx_create_eventos_table.php:

php
public function up()
{
    Schema::create('eventos', function (Blueprint $table) {
        $table->id('id_evento');
        $table->string('titulo', 200);
        $table->string('ubicacion', 200);
        $table->text('descripcion');
        $table->timestamps();
    });
}

public function down()
{
    Schema::dropIfExists('eventos');
}
E. Migración de Fechas y Horas
bash
php artisan make:migration create_fechas_horas_table
database/migrations/xxxx_create_fechas_horas_table.php:

php
public function up()
{
    Schema::create('fechas_horas', function (Blueprint $table) {
        $table->id();
        $table->unsignedBigInteger('id_evento');
        $table->dateTime('fechaHora');
        $table->timestamps();
        
        $table->foreign('id_evento')->references('id_evento')->on('eventos')->onDelete('cascade');
        $table->unique(['id_evento', 'fechaHora']);
    });
}

public function down()
{
    Schema::dropIfExists('fechas_horas');
}
F. Migración de Interacciones
bash
php artisan make:migration create_interacciones_table
database/migrations/xxxx_create_interacciones_table.php:

php
public function up()
{
    Schema::create('interacciones', function (Blueprint $table) {
        $table->id();
        $table->unsignedBigInteger('id_evento');
        $table->string('mail', 100);
        $table->text('comentarios')->nullable();
        $table->integer('puntaje')->nullable();
        $table->boolean('visitado')->default(false);
        $table->timestamps();
        
        $table->foreign('id_evento')->references('id_evento')->on('eventos')->onDelete('cascade');
        $table->foreign('mail')->references('mail')->on('users')->onDelete('cascade');
        $table->unique(['id_evento', 'mail']);
    });
}

public function down()
{
    Schema::dropIfExists('interacciones');
}
G. Migración de Comentarios
bash
php artisan make:migration create_comentarios_table
database/migrations/xxxx_create_comentarios_table.php:

php
public function up()
{
    Schema::create('comentarios', function (Blueprint $table) {
        $table->id();
        $table->unsignedBigInteger('id_evento');
        $table->string('mail', 100);
        $table->text('comentario');
        $table->timestamps();
        
        $table->foreign('id_evento')->references('id_evento')->on('eventos')->onDelete('cascade');
        $table->foreign('mail')->references('mail')->on('users')->onDelete('cascade');
        $table->unique(['id_evento', 'mail', 'comentario']);
    });
}

public function down()
{
    Schema::dropIfExists('comentarios');
}
H. Migración de Relación Crea (Organizador-Evento)
bash
php artisan make:migration create_crea_table
database/migrations/xxxx_create_crea_table.php:

php
public function up()
{
    Schema::create('crea', function (Blueprint $table) {
        $table->unsignedBigInteger('id_evento');
        $table->string('mail', 100);
        $table->timestamps();
        
        $table->foreign('id_evento')->references('id_evento')->on('eventos')->onDelete('cascade');
        $table->foreign('mail')->references('mail')->on('organizadores')->onDelete('cascade');
        $table->primary(['id_evento', 'mail']);
    });
}

public function down()
{
    Schema::dropIfExists('crea');
}
I. Migración de Categorías
bash
php artisan make:migration create_categorias_table
database/migrations/xxxx_create_categorias_table.php:

php
public function up()
{
    Schema::create('categorias', function (Blueprint $table) {
        $table->id('id_categoria');
        $table->string('nombreCategoria', 100);
        $table->timestamps();
    });
}

public function down()
{
    Schema::dropIfExists('categorias');
}
J. Migración de Categoría-Evento
bash
php artisan make:migration create_categoria_evento_table
database/migrations/xxxx_create_categoria_evento_table.php:

php
public function up()
{
    Schema::create('categoria_evento', function (Blueprint $table) {
        $table->unsignedBigInteger('id_categoria');
        $table->unsignedBigInteger('id_evento');
        $table->timestamps();
        
        $table->foreign('id_categoria')->references('id_categoria')->on('categorias')->onDelete('cascade');
        $table->foreign('id_evento')->references('id_evento')->on('eventos')->onDelete('cascade');
        $table->primary(['id_categoria', 'id_evento']);
    });
}

public function down()
{
    Schema::dropIfExists('categoria_evento');
}
K. Migración de Preferencias
bash
php artisan make:migration create_prefiere_table
database/migrations/xxxx_create_prefiere_table.php:

php
public function up()
{
    Schema::create('prefiere', function (Blueprint $table) {
        $table->string('mail', 100);
        $table->unsignedBigInteger('id_categoria');
        $table->timestamps();
        
        $table->foreign('mail')->references('mail')->on('users')->onDelete('cascade');
        $table->foreign('id_categoria')->references('id_categoria')->on('categorias')->onDelete('cascade');
        $table->primary(['mail', 'id_categoria']);
    });
}

public function down()
{
    Schema::dropIfExists('prefiere');
}
2. Modelos
A. Modelo User (modificado)
app/Models/User.php:

php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    use HasFactory, Notifiable;

    protected $table = 'users';
    protected $primaryKey = 'mail';
    public $incrementing = false;
    protected $keyType = 'string';

    protected $fillable = [
        'nombre',
        'mail',
        'contraseña',
    ];

    protected $hidden = [
        'contraseña',
    ];

    // Relaciones
    public function organizador()
    {
        return $this->hasOne(Organizador::class, 'mail', 'mail');
    }

    public function participante()
    {
        return $this->hasOne(Participante::class, 'mail', 'mail');
    }

    public function interacciones()
    {
        return $this->hasMany(Interaccion::class, 'mail', 'mail');
    }

    public function comentarios()
    {
        return $this->hasMany(Comentario::class, 'mail', 'mail');
    }

    public function preferencias()
    {
        return $this->belongsToMany(Categoria::class, 'prefiere', 'mail', 'id_categoria');
    }

    public function getAuthPassword()
    {
        return $this->contraseña;
    }
}
B. Modelo Organizador
bash
php artisan make:model Organizador
app/Models/Organizador.php:

php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Organizador extends Model
{
    use HasFactory;

    protected $table = 'organizadores';
    protected $primaryKey = 'mail';
    public $incrementing = false;
    protected $keyType = 'string';

    protected $fillable = [
        'mail',
        'contacto',
    ];

    public function user()
    {
        return $this->belongsTo(User::class, 'mail', 'mail');
    }

    public function eventos()
    {
        return $this->belongsToMany(Evento::class, 'crea', 'mail', 'id_evento');
    }
}
C. Modelo Participante
bash
php artisan make:model Participante
app/Models/Participante.php:

php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Participante extends Model
{
    use HasFactory;

    protected $table = 'participantes';
    protected $primaryKey = 'mail';
    public $incrementing = false;
    protected $keyType = 'string';

    protected $fillable = [
        'mail',
    ];

    public function user()
    {
        return $this->belongsTo(User::class, 'mail', 'mail');
    }
}
D. Modelo Evento
bash
php artisan make:model Evento
app/Models/Evento.php:

php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Evento extends Model
{
    use HasFactory;

    protected $table = 'eventos';
    protected $primaryKey = 'id_evento';

    protected $fillable = [
        'titulo',
        'ubicacion',
        'descripcion',
    ];

    public function fechasHoras()
    {
        return $this->hasMany(FechaHora::class, 'id_evento');
    }

    public function interacciones()
    {
        return $this->hasMany(Interaccion::class, 'id_evento');
    }

    public function comentarios()
    {
        return $this->hasMany(Comentario::class, 'id_evento');
    }

    public function organizadores()
    {
        return $this->belongsToMany(Organizador::class, 'crea', 'id_evento', 'mail');
    }

    public function categorias()
    {
        return $this->belongsToMany(Categoria::class, 'categoria_evento', 'id_evento', 'id_categoria');
    }
}
E. Modelo FechaHora
bash
php artisan make:model FechaHora
app/Models/FechaHora.php:

php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class FechaHora extends Model
{
    use HasFactory;

    protected $table = 'fechas_horas';

    protected $fillable = [
        'id_evento',
        'fechaHora',
    ];

    public function evento()
    {
        return $this->belongsTo(Evento::class, 'id_evento');
    }
}
F. Modelo Interaccion
bash
php artisan make:model Interaccion
app/Models/Interaccion.php:

php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Interaccion extends Model
{
    use HasFactory;

    protected $table = 'interacciones';

    protected $fillable = [
        'id_evento',
        'mail',
        'comentarios',
        'puntaje',
        'visitado',
    ];

    public function evento()
    {
        return $this->belongsTo(Evento::class, 'id_evento');
    }

    public function user()
    {
        return $this->belongsTo(User::class, 'mail', 'mail');
    }
}
G. Modelo Comentario
bash
php artisan make:model Comentario
app/Models/Comentario.php:

php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Comentario extends Model
{
    use HasFactory;

    protected $table = 'comentarios';

    protected $fillable = [
        'id_evento',
        'mail',
        'comentario',
    ];

    public function evento()
    {
        return $this->belongsTo(Evento::class, 'id_evento');
    }

    public function user()
    {
        return $this->belongsTo(User::class, 'mail', 'mail');
    }
}
H. Modelo Categoria
bash
php artisan make:model Categoria
app/Models/Categoria.php:

php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Categoria extends Model
{
    use HasFactory;

    protected $table = 'categorias';
    protected $primaryKey = 'id_categoria';

    protected $fillable = [
        'nombreCategoria',
    ];

    public function eventos()
    {
        return $this->belongsToMany(Evento::class, 'categoria_evento', 'id_categoria', 'id_evento');
    }

    public function usuarios()
    {
        return $this->belongsToMany(User::class, 'prefiere', 'id_categoria', 'mail');
    }
}
3. Ejecutar Migraciones
bash
php artisan migrate
4. Configuración de Autenticación
Debes modificar el controlador de autenticación para usar el campo 'mail' en lugar de 'email':

app/Http/Controllers/Auth/LoginController.php:

php
public function username()
{
    return 'mail';
}
app/Http/Controllers/Auth/RegisterController.php:

php
protected function create(array $data)
{
    return User::create([
        'nombre' => $data['name'],
        'mail' => $data['email'],
        'contraseña' => Hash::make($data['password']),
    ]);
}
5. Uso de la Base de Datos
Ahora puedes usar Eloquent para trabajar con tus datos:

php
// Crear un usuario
$user = User::create([
    'nombre' => 'Juan Pérez',
    'mail' => 'juan@example.com',
    'contraseña' => bcrypt('password123'),
]);

// Crear un organizador
$organizador = Organizador::create([
    'mail' => 'juan@example.com',
    'contacto' => 'Tel: 123-456-7890',
]);

// Crear un evento
$evento = Evento::create([
    'titulo' => 'Conferencia de Laravel',
    'ubicacion' => 'Auditorio Principal',
    'descripcion' => 'Una conferencia sobre Laravel 12',
]);

// Relacionar organizador con evento
$organizador->eventos()->attach($evento->id_evento);

// Agregar fecha y hora al evento
$fechaHora = FechaHora::create([
    'id_evento' => $evento->id_evento,
    'fechaHora' => '2024-06-15 10:00:00',
]);
Esta implementación sigue fielmente tu estructura de base de datos mientras mantiene las convenciones de Laravel. ¿Necesitas que implemente algún controlador o vista específica para esta estructura?

por que hacemos est de modify_users_table
¡Excelente pregunta! Es importante entender por qué hacemos esto. Te explico las razones:

¿Por qué modificar la tabla users?
1. Para adaptarnos a TU estructura de base de datos
Laravel viene con una estructura predeterminada para users, pero tú tienes requisitos específicos:

Usas mail en lugar de email

Usas nombre en lugar de name

Usas contraseña en lugar de password

No necesitas email_verified_at y remember_token

2. Mantener la coherencia con tu diseño
Tu diagrama de base de datos ya está bien pensado y queremos respetarlo completamente en lugar de imponer la estructura default de Laravel.

3. Para usar Eloquent ORM correctamente
Al modificar la tabla para que coincida con tu diseño, podemos usar todas las ventajas de Eloquent sin problemas.

Alternativa: Podríamos NO modificar la tabla users
Si prefieres mantener la estructura default de Laravel y adaptar tu diseño, podríamos hacerlo así:

Manteniendo la estructura default de users:
php
// En tu migración de organizadores y participantes
Schema::create('organizadores', function (Blueprint $table) {
    $table->unsignedBigInteger('user_id')->primary(); // Cambiar a user_id
    $table->string('contacto', 200);
    $table->timestamps();
    
    $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
});
Ventajas de cada enfoque:
Modificar users (tu enfoque actual):

✅ Se mantiene fiel a tu diseño original

✅ Más fácil de entender si vienes de SQL puro

✅ Coherencia total con tu diagrama

Mantener estructura Laravel:

✅ Menos modificaciones

✅ Más compatible con paquetes de Laravel

✅ Sigue convenciones estándar

¿Qué te recomiendo?
Dado que ya tienes un diseño de base de datos bien pensado, sigue con el approach de modificar users. Es mejor mantener tu diseño coherente.

Importante: Configuración adicional necesaria
Después de modificar la tabla users, necesitas decirle a Laravel sobre estos cambios:

En el modelo User:

php
class User extends Authenticatable
{
    // Especificar que usamos 'mail' como clave primaria
    protected $primaryKey = 'mail';
    public $incrementing = false;
    protected $keyType = 'string';

    // Definir los campos fillable
    protected $fillable = [
        'nombre', 
        'mail', 
        'contraseña'
    ];

    // Para la autenticación
    public function getAuthPassword()
    {
        return $this->contraseña;
    }

    // Para decirle a Laravel qué campo usar como username
    public function getAuthIdentifierName()
    {
        return 'mail';
    }
}
En config/auth.php:

php
'providers' => [
    'users' => [
        'driver' => 'eloquent',
        'model' => App\Models\User::class,
        'identifier' => 'mail', // Usar mail como identificador
    ],
],
¿Prefieres que continuemos con el approach de modificar la tabla users o te gustaría explorar la alternativa de mantener la estructura default de Laravel?

error en las migraciones 
php artisan migrate

   INFO  Running migrations.

  2025_08_25_185546_modify_users_table ..................................................... 9s FAIL

   Illuminate\Database\QueryException 

  SQLSTATE[42S22]: Column not found: 1054 Unknown column 'mail' in 'users' (Connection: mysql, SQL: alter table `users` modify `mail` varchar(100) not null)

  at vendor/laravel/framework/src/Illuminate/Database/Connection.php:824
    820▕                     $this->getName(), $query, $this->prepareBindings($bindings), $e
    821▕                 );
    822▕             }
    823▕ 
  ➜ 824▕             throw new QueryException(
    825▕                 $this->getName(), $query, $this->prepareBindings($bindings), $e
    826▕             );
    827▕         }
    828▕     }

      +9 vendor frames

  10  database/migrations/2025_08_25_185546_modify_users_table.php:14
      Illuminate\Support\Facades\Facade::__callStatic("table")
      +26 vendor frames

  37  artisan:16
      Illuminate\Foundation\Application::handleCommand(Object(Symfony\Component\Console\Input\ArgvInput))
¡Tienes razón! Hay un error en la migración. El problema es que estamos intentando modificar una columna mail que aún no existe. Vamos a corregir la migración paso a paso.

Solución Corregida
1. Primero, crea una migración para agregar la columna mail
bash
php artisan make:migration add_mail_to_users_table
database/migrations/xxxx_add_mail_to_users_table.php:

php
public function up()
{
    Schema::table('users', function (Blueprint $table) {
        $table->string('mail', 100)->nullable()->after('email');
    });
}

public function down()
{
    Schema::table('users', function (Blueprint $table) {
        $table->dropColumn('mail');
    });
}
2. Luego, modifica la migración modify_users_table:
database/migrations/xxxx_modify_users_table.php:

php
public function up()
{
    // Primero copiar datos de email a mail
    DB::table('users')->update(['mail' => DB::raw('email')]);
    
    Schema::table('users', function (Blueprint $table) {
        // Hacer que mail sea NOT NULL y único
        $table->string('mail', 100)->nullable(false)->unique()->change();
        
        // Renombrar columnas
        $table->renameColumn('name', 'nombre');
        $table->renameColumn('password', 'contraseña');
        
        // Eliminar columnas no necesarias
        $table->dropColumn(['email', 'email_verified_at', 'remember_token']);
    });
}

public function down()
{
    Schema::table('users', function (Blueprint $table) {
        // Revertir cambios
        $table->string('email')->nullable();
        $table->timestamp('email_verified_at')->nullable();
        $table->rememberToken();
        
        // Copiar datos de mail a email
        DB::table('users')->update(['email' => DB::raw('mail')]);
        
        $table->renameColumn('nombre', 'name');
        $table->renameColumn('contraseña', 'password');
        $table->dropColumn('mail');
    });
}
3. Alternativa más simple: Crear una migración completamente nueva
Si prefieres, podemos hacerlo más simple creando una nueva migración desde cero:

bash
php artisan make:migration recreate_users_table
database/migrations/xxxx_recreate_users_table.php:

php
public function up()
{
    // 1. Crear tabla temporal para backup
    Schema::create('users_backup', function (Blueprint $table) {
        $table->id();
        $table->string('name');
        $table->string('email')->unique();
        $table->timestamp('email_verified_at')->nullable();
        $table->string('password');
        $table->rememberToken();
        $table->timestamps();
    });
    
    // Copiar datos
    DB::statement('INSERT INTO users_backup SELECT * FROM users');
    
    // 2. Eliminar tabla users original
    Schema::dropIfExists('users');
    
    // 3. Crear nueva tabla users con tu estructura
    Schema::create('users', function (Blueprint $table) {
        $table->string('mail', 100)->primary();
        $table->string('nombre', 100);
        $table->string('contraseña');
        $table->timestamps();
    });
    
    // 4. Migrar datos
    $users = DB::table('users_backup')->get();
    foreach ($users as $user) {
        DB::table('users')->insert([
            'mail' => $user->email,
            'nombre' => $user->name,
            'contraseña' => $user->password,
            'created_at' => $user->created_at,
            'updated_at' => $user->updated_at
        ]);
    }
    
    // 5. Eliminar tabla temporal
    Schema::dropIfExists('users_backup');
}

public function down()
{
    // Backup de la nueva estructura
    Schema::create('users_new_backup', function (Blueprint $table) {
        $table->string('mail', 100)->primary();
        $table->string('nombre', 100);
        $table->string('contraseña');
        $table->timestamps();
    });
    
    DB::statement('INSERT INTO users_new_backup SELECT * FROM users');
    
    // Volver a la estructura original
    Schema::dropIfExists('users');
    
    Schema::create('users', function (Blueprint $table) {
        $table->id();
        $table->string('name');
        $table->string('email')->unique();
        $table->timestamp('email_verified_at')->nullable();
        $table->string('password');
        $table->rememberToken();
        $table->timestamps();
    });
    
    // Migrar datos de vuelta
    $users = DB::table('users_new_backup')->get();
    foreach ($users as $user) {
        DB::table('users')->insert([
            'name' => $user->nombre,
            'email' => $user->mail,
            'password' => $user->contraseña,
            'created_at' => $user->created_at,
            'updated_at' => $user->updated_at
        ]);
    }
    
    Schema::dropIfExists('users_new_backup');
}
Recomendación
Te sugiero que elimines las migraciones fallidas y uses el approach de recrear la tabla:

bash
# Eliminar migraciones fallidas
php artisan migrate:reset

# Crear nueva migración
php artisan make:migration create_custom_users_table

# Ejecutar migraciones
php artisan migrate
¿Qué approach prefieres que implementemos?

me sigue dando el error en modify-users-table 
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('users', function (Blueprint $table) {
        $table->dropColumn('email_verified_at');
        $table->dropColumn('remember_token');
        $table->string('mail', 100)->unique()->change();
        $table->renameColumn('email', 'mail');
        $table->renameColumn('name', 'nombre');
        $table->renameColumn('password', 'contraseña');
    });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('users', function (Blueprint $table) {
        $table->timestamp('email_verified_at')->nullable();
        $table->rememberToken();
        $table->string('email')->unique()->change();
        $table->renameColumn('mail', 'email');
        $table->renameColumn('nombre', 'name');
        $table->renameColumn('contraseña', 'password');
    });

    }
};
php artisan migrate:reset

   INFO  Rolling back migrations.

  0001_01_01_000002_create_jobs_table ...................................................... 3s DONE
  0001_01_01_000001_create_cache_table ..................................................... 2s DONE
  0001_01_01_000000_create_users_table ..................................................... 3s DONE

root@67ce1556886e:/var/www/html# php artisan migrate

   INFO  Running migrations.

  0001_01_01_000000_create_users_table ..................................................... 9s DONE
  0001_01_01_000001_create_cache_table ..................................................... 4s DONE
  0001_01_01_000002_create_jobs_table ...................................................... 8s DONE
  2025_08_25_185546_modify_users_table ..................................................... 9s FAIL

   Illuminate\Database\QueryException 

  SQLSTATE[42S22]: Column not found: 1054 Unknown column 'mail' in 'users' (Connection: mysql, SQL: alter table `users` modify `mail` varchar(100) not null)

  at vendor/laravel/framework/src/Illuminate/Database/Connection.php:824
    820▕                     $this->getName(), $query, $this->prepareBindings($bindings), $e
    821▕                 );
    822▕             }
    823▕ 
  ➜ 824▕             throw new QueryException(
    825▕                 $this->getName(), $query, $this->prepareBindings($bindings), $e
    826▕             );
    827▕         }
    828▕     }

      +9 vendor frames

  10  database/migrations/2025_08_25_185546_modify_users_table.php:14
      Illuminate\Support\Facades\Facade::__callStatic("table")
      +26 vendor frames

  37  artisan:16
      Illuminate\Foundation\Application::handleCommand(Object(Symfony\Component\Console\Input\ArgvInput))

root@67ce1556886e:/var/www/html#
El problema es el orden de las operaciones. Estás intentando modificar la columna mail antes de crearla. Vamos a corregirlo:

Solución Definitiva
1. Primero, elimina la migración problemática:
bash
php artisan migrate:reset
rm database/migrations/2025_08_25_185546_modify_users_table.php
2. Crea una nueva migración en el orden correcto:
bash
php artisan make:migration modify_users_table
3. Edita la migración con este código CORREGIDO:
database/migrations/xxxx_modify_users_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

return new class extends Migration
{
    public function up(): void
    {
        Schema::table('users', function (Blueprint $table) {
            // PRIMERO: Agregar la nueva columna 'mail'
            $table->string('mail', 100)->nullable()->after('email');
        });

        // SEGUNDO: Copiar datos de email a mail
        DB::table('users')->update(['mail' => DB::raw('email')]);

        Schema::table('users', function (Blueprint $table) {
            // TERCERO: Hacer mail NOT NULL y único
            $table->string('mail', 100)->nullable(false)->unique()->change();
            
            // CUARTO: Renombrar columnas
            $table->renameColumn('name', 'nombre');
            $table->renameColumn('password', 'contraseña');
            
            // QUINTO: Eliminar columnas no necesarias
            $table->dropColumn(['email', 'email_verified_at', 'remember_token']);
        });
    }

    public function down(): void
    {
        Schema::table('users', function (Blueprint $table) {
            // PRIMERO: Agregar columnas originales
            $table->string('email')->nullable()->after('mail');
            $table->timestamp('email_verified_at')->nullable();
            $table->rememberToken();
        });

        // SEGUNDO: Copiar datos de mail a email
        DB::table('users')->update(['email' => DB::raw('mail')]);

        Schema::table('users', function (Blueprint $table) {
            // TERCERO: Revertir renombres
            $table->renameColumn('nombre', 'name');
            $table->renameColumn('contraseña', 'password');
            
            // CUARTO: Eliminar la columna mail
            $table->dropColumn('mail');
            
            // QUINTO: Hacer email único
            $table->string('email')->nullable(false)->unique()->change();
        });
    }
};
4. Ejecuta las migraciones en orden:
bash
# Primero ejecuta las migraciones por defecto
php artisan migrate

# Luego ejecuta tu migración modificada
php artisan migrate
Alternativa más simple (Recomendada)
Si sigue dando problemas, crea una migración completamente nueva:

bash
php artisan make:migration create_custom_users_table
database/migrations/xxxx_create_custom_users_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

return new class extends Migration
{
    public function up(): void
    {
        // 1. Crear tabla temporal de backup
        Schema::create('old_users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });

        // 2. Copiar datos a tabla temporal
        DB::statement('INSERT INTO old_users SELECT * FROM users');

        // 3. Eliminar tabla users original
        Schema::dropIfExists('users');

        // 4. Crear NUEVA tabla users con tu estructura
        Schema::create('users', function (Blueprint $table) {
            $table->string('mail', 100)->primary();
            $table->string('nombre', 100);
            $table->string('contraseña');
            $table->timestamps();
        });

        // 5. Migrar datos
        $oldUsers = DB::table('old_users')->get();
        foreach ($oldUsers as $user) {
            DB::table('users')->insert([
                'mail' => $user->email,
                'nombre' => $user->name,
                'contraseña' => $user->password,
                'created_at' => $user->created_at,
                'updated_at' => $user->updated_at
            ]);
        }

        // 6. Eliminar tabla temporal
        Schema::dropIfExists('old_users');
    }

    public function down(): void
    {
        // Proceso inverso para revertir
        Schema::create('new_users_backup', function (Blueprint $table) {
            $table->string('mail', 100)->primary();
            $table->string('nombre', 100);
            $table->string('contraseña');
            $table->timestamps();
        });

        DB::statement('INSERT INTO new_users_backup SELECT * FROM users');

        Schema::dropIfExists('users');

        // Recuperar estructura original
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });

        $backupUsers = DB::table('new_users_backup')->get();
        foreach ($backupUsers as $user) {
            DB::table('users')->insert([
                'name' => $user->nombre,
                'email' => $user->mail,
                'password' => $user->contraseña,
                'created_at' => $user->created_at,
                'updated_at' => $user->updated_at
            ]);
        }

        Schema::dropIfExists('new_users_backup');
    }
};
Ejecuta:

bash
php artisan migrate:refresh
La alternativa simple es más segura porque evita los problemas de modificar columnas en caliente. ¿Prefieres que use este approach?

no mero me estas deformando la base de datos que usamos el atributo que hay es mail no email quiero respetar la tabla que de users que te di en la base de datos
¡Tienes toda la razón! Vamos a respetar completamente tu estructura de base de datos. El error fue mío al querer modificar la tabla existente. Mejor creamos la tabla desde cero con tu estructura exacta.

Solución Correcta - Respeta tu estructura al 100%
1. Elimina la migración problemática
bash
php artisan migrate:reset
rm database/migrations/2025_08_25_185546_modify_users_table.php
2. Crea la migración correcta para users
bash
php artisan make:migration create_users_custom_table
3. MIGRACIÓN CORREGIDA - Respeta tu estructura exacta:
database/migrations/xxxx_create_users_custom_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

return new class extends Migration
{
    public function up(): void
    {
        // Eliminar la tabla users por defecto de Laravel si existe
        Schema::dropIfExists('users');
        
        // Crear la tabla users con TU estructura exacta
        Schema::create('users', function (Blueprint $table) {
            $table->string('mail', 100)->primary(); // PRIMARY KEY
            $table->string('nombre', 100)->notNull();
            $table->string('contraseña')->notNull();
            // NO incluimos email_verified_at, remember_token, etc.
            // Solo los campos que especificaste en tu diseño
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('users');
        
        // Recuperar la estructura por defecto de Laravel si necesitas revertir
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });
    }
};
4. Ahora crea las demás migraciones en ORDEN:
organizadores migration:

php
public function up()
{
    Schema::create('organizadores', function (Blueprint $table) {
        $table->string('mail', 100)->primary(); // PRIMARY KEY
        $table->string('contacto', 200);
        $table->timestamps();
        
        $table->foreign('mail')->references('mail')->on('users')->onDelete('cascade');
    });
}
participantes migration:

php
public function up()
{
    Schema::create('participantes', function (Blueprint $table) {
        $table->string('mail', 100)->primary(); // PRIMARY KEY
        $table->timestamps();
        
        $table->foreign('mail')->references('mail')->on('users')->onDelete('cascade');
    });
}
5. Modelo User CORREGIDO:
app/Models/User.php:

php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;

class User extends Authenticatable
{
    use HasFactory;

    protected $table = 'users';
    protected $primaryKey = 'mail';
    public $incrementing = false;
    protected $keyType = 'string';

    protected $fillable = [
        'mail',
        'nombre', 
        'contraseña'
    ];

    protected $hidden = [
        'contraseña',
    ];

    // Para autenticación
    public function getAuthPassword()
    {
        return $this->contraseña;
    }

    public function getAuthIdentifierName()
    {
        return 'mail';
    }

    // Relaciones
    public function organizador()
    {
        return $this->hasOne(Organizador::class, 'mail', 'mail');
    }

    public function participante()
    {
        return $this->hasOne(Participante::class, 'mail', 'mail');
    }
}
6. Configuración de autenticación:
config/auth.php:

php
'providers' => [
    'users' => [
        'driver' => 'eloquent',
        'model' => App\Models\User::class,
        'identifier' => 'mail', // Usar mail como username
    ],
],
7. Ejecuta las migraciones en ORDEN:
bash
php artisan migrate
Orden de ejecución correcto:
create_users_custom_table - Primero users con tu estructura

create_organizadores_table - Luego organizadores

create_participantes_table - Después participantes

Las demás tablas...

Así respetamos tu diseño exacto: mail como PRIMARY KEY, nombre, contraseña, sin campos adicionales.

¿Te parece bien este approach? Así mantenemos fidelidad total a tu diseño de base de datos.

como borro las migraciones anteriores ya existen  borrarlas todas para que me las cre de cero
¡Perfecto! Te explico cómo borrar todas las migraciones y empezar desde cero:

1. Borrar todas las migraciones existentes
bash
# Primero elimina todas las tablas de la base de datos
php artisan migrate:reset

# Luego borra todos los archivos de migración
rm database/migrations/*.php
2. Crear las migraciones desde cero en ORDEN CORRECTO
bash
# 1. Primero la tabla users (TU estructura exacta)
php artisan make:migration create_users_table

# 2. Tabla organizadores
php artisan make:migration create_organizadores_table

# 3. Tabla participantes  
php artisan make:migration create_participantes_table

# 4. Tabla eventos
php artisan make:migration create_eventos_table

# 5. Tabla fechas_horas
php artisan make:migration create_fechas_horas_table

# 6. Tabla interacciones
php artisan make:migration create_interacciones_table

# 7. Tabla comentarios
php artisan make:migration create_comentarios_table

# 8. Tabla crea (relación organizador-evento)
php artisan make:migration create_crea_table

# 9. Tabla categorias
php artisan make:migration create_categorias_table

# 10. Tabla categoria_evento
php artisan make:migration create_categoria_evento_table

# 11. Tabla prefiere
php artisan make:migration create_prefiere_table
3. Contenido de las migraciones (RESPETANDO tu estructura)
create_users_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->string('mail', 100)->primary(); // PRIMARY KEY
            $table->string('nombre', 100);
            $table->string('contraseña');
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('users');
    }
};
create_organizadores_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('organizadores', function (Blueprint $table) {
            $table->string('mail', 100)->primary();
            $table->string('contacto', 200);
            $table->timestamps();
            
            $table->foreign('mail')->references('mail')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('organizadores');
    }
};
create_participantes_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('participantes', function (Blueprint $table) {
            $table->string('mail', 100)->primary();
            $table->timestamps();
            
            $table->foreign('mail')->references('mail')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('participantes');
    }
};
4. Ejecutar las migraciones en orden
bash
# Ejecutar TODAS las migraciones en el orden correcto
php artisan migrate
5. Verificar que todo se creó correctamente
bash
# Ver las tablas creadas
php artisan db:show

# Ver el estado de las migraciones
php artisan migrate:status
Si quieres ser más radical y empezar COMPLETAMENTE desde cero:
bash
# 1. Eliminar toda la base de datos
mysql -u root -p -e "DROP DATABASE event_organizer; CREATE DATABASE event_organizer;"

# 2. Reiniciar completamente Laravel
rm -rf database/migrations/*.php
composer dump-autoload

# 3. Crear las migraciones como te indiqué arriba
# 4. Ejecutar migraciones
php artisan migrate
¡Así nos aseguramos de que todo esté limpio y en el orden correcto! Tu estructura de base de datos se mantendrá exactamente como la diseñaste.

¿Quieres que proceda con crear todas las migraciones restantes con tu estructura exacta?

php artisan migrate

   INFO  Running migrations.

  0001_01_01_000000_create_users_table .................................................... 10s DONE
  0001_01_01_000001_create_cache_table ..................................................... 3s DONE
  0001_01_01_000002_create_jobs_table ...................................................... 8s DONE
  2025_08_25_190737_create_organizadores_table ....................................... 106.11ms FAIL

   Illuminate\Database\QueryException 

  SQLSTATE[42S01]: Base table or view already exists: 1050 Table 'organizadores' already exists (Connection: mysql, SQL: create table `organizadores` (`mail` varchar(100) not null, `contacto` varchar(200) not null, `created_at` timestamp null, `updated_at` timestamp null, primary key (`mail`)) default character set utf8mb4 collate 'utf8mb4_unicode_ci')

  at vendor/laravel/framework/src/Illuminate/Database/Connection.php:824
    820▕                     $this->getName(), $query, $this->prepareBindings($bindings), $e
    821▕                 );
    822▕             }
    823▕ 
  ➜ 824▕             throw new QueryException(
    825▕                 $this->getName(), $query, $this->prepareBindings($bindings), $e
    826▕             );
    827▕         }
    828▕     }

      +9 vendor frames 

  10  database/migrations/2025_08_25_190737_create_organizadores_table.php:14
      Illuminate\Support\Facades\Facade::__callStatic("create")
      +26 vendor frames

  37  artisan:16
      Illuminate\Foundation\Application::handleCommand(Object(Symfony\Component\Console\Input\ArgvInput))

root@67ce1556886e:/var/www/html# 
dios por que no me deja crear las migraciones de ninguna de las formas anteriores que me distes funciona
¡El problema es que las tablas ya existen en la base de datos! Las migraciones de Laravel por defecto (0001_01_01_000000_create_users_table, etc.) se ejecutaron primero y crearon las tablas con la estructura por defecto.

Solución definitiva:
1. Limpiar COMPLETAMENTE la base de datos:
bash
# Borrar TODAS las tablas
php artisan db:wipe

# O si prefieres más radical:
mysql -u root -p -e "DROP DATABASE event_organizer; CREATE DATABASE event_organizer;"
2. Eliminar TODAS las migraciones por defecto de Laravel:
bash
# Borrar migraciones por defecto
rm database/migrations/0001_01_01_000000_create_users_table.php
rm database/migrations/0001_01_01_000001_create_cache_table.php  
rm database/migrations/0001_01_01_000002_create_jobs_table.php
3. Crear SOLO tus migraciones personalizadas:
Primero crea la migración de users (TU estructura):

bash
php artisan make:migration create_users_table
database/migrations/2025_08_25_xxxxxx_create_users_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->string('mail', 100)->primary();
            $table->string('nombre', 100);
            $table->string('contraseña');
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('users');
    }
};
4. Ejecutar migraciones en ORDEN:
bash
# Solo ejecutar TU migración de users
php artisan migrate
5. Crear las demás migraciones UNA POR UNA:
bash
# Crear organizadores
php artisan make:migration create_organizadores_table
database/migrations/2025_08_25_xxxxxx_create_organizadores_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('organizadores', function (Blueprint $table) {
            $table->string('mail', 100)->primary();
            $table->string('contacto', 200);
            $table->timestamps();
            
            $table->foreign('mail')->references('mail')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('organizadores');
    }
};
bash
# Ejecutar solo esta migración
php artisan migrate
O mejor aún: ¡Hagámoslo manualmente!
Dado que tienes problemas con migraciones, creemos las tablas MANUALMENTE en MySQL:

bash
# Conectarte a MySQL
mysql -u root -p event_organizer
Ejecuta estos comandos SQL DIRECTAMENTE:

sql
-- 1. Eliminar todas las tablas si existen
DROP TABLE IF EXISTS prefiere, categoria_evento, categorias, crea, comentarios, interacciones, fechas_horas, eventos, participantes, organizadores, users;

-- 2. Crear tabla USERS (TU estructura exacta)
CREATE TABLE users (
    mail VARCHAR(100) PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    contraseña VARCHAR(255) NOT NULL,
    created_at TIMESTAMP NULL,
    updated_at TIMESTAMP NULL
);

-- 3. Crear tabla ORGANIZADORES
CREATE TABLE organizadores (
    mail VARCHAR(100) PRIMARY KEY,
    contacto VARCHAR(200) NOT NULL,
    created_at TIMESTAMP NULL,
    updated_at TIMESTAMP NULL,
    FOREIGN KEY (mail) REFERENCES users(mail) ON DELETE CASCADE
);

-- 4. Crear tabla PARTICIPANTES
CREATE TABLE participantes (
    mail VARCHAR(100) PRIMARY KEY,
    created_at TIMESTAMP NULL,
    updated_at TIMESTAMP NULL,
    FOREIGN KEY (mail) REFERENCES users(mail) ON DELETE CASCADE
);
Luego puedes continuar con el resto de tablas...

¿Por qué no funciona?
Laravel crea migraciones por defecto que interfieren

El orden de ejecución es importante

Las tablas ya existían en la BD

¡Hagámoslo manualmente en MySQL para evitar problemas! ¿Te parece?

root@67ce1556886e:/var/www/html# mysql -u root -p   
bash: mysql: command not found
root@67ce1556886e:/var/www/html#
¡El comando mysql no está disponible en tu contenedor! Pero no te preocupes, podemos usar Artisan Tinker o crear un Seeder para hacerlo directamente desde Laravel.

Opción 1: Usar Artisan Tinker (Recomendado)
bash
# Abrir la consola de Tinker
php artisan tinker
Dentro de Tinker, ejecuta estos comandos SQL:

php
// 1. Eliminar todas las tablas existentes
DB::statement('DROP TABLE IF EXISTS prefiere, categoria_evento, categorias, crea, comentarios, interacciones, fechas_horas, eventos, participantes, organizadores, users');

// 2. Crear tabla USERS con TU estructura exacta
DB::statement("
    CREATE TABLE users (
        mail VARCHAR(100) PRIMARY KEY,
        nombre VARCHAR(100) NOT NULL,
        contraseña VARCHAR(255) NOT NULL,
        created_at TIMESTAMP NULL,
        updated_at TIMESTAMP NULL
    )
");

// 3. Crear tabla ORGANIZADORES
DB::statement("
    CREATE TABLE organizadores (
        mail VARCHAR(100) PRIMARY KEY,
        contacto VARCHAR(200) NOT NULL,
        created_at TIMESTAMP NULL,
        updated_at TIMESTAMP NULL,
        FOREIGN KEY (mail) REFERENCES users(mail) ON DELETE CASCADE
    )
");

// 4. Crear tabla PARTICIPANTES
DB::statement("
    CREATE TABLE participantes (
        mail VARCHAR(100) PRIMARY KEY,
        created_at TIMESTAMP NULL,
        updated_at TIMESTAMP NULL,
        FOREIGN KEY (mail) REFERENCES users(mail) ON DELETE CASCADE
    )
");

// Verificar que se crearon las tablas
DB::select('SHOW TABLES');
Opción 2: Crear un Seeder para inicializar la BD
bash
php artisan make:seeder DatabaseInitializer
database/seeders/DatabaseInitializer.php:

php
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class DatabaseInitializer extends Seeder
{
    public function run(): void
    {
        // Desactivar verificaciones de claves foráneas
        DB::statement('SET FOREIGN_KEY_CHECKS=0');

        // Eliminar todas las tablas existentes
        $tables = [
            'prefiere', 'categoria_evento', 'categorias', 'crea', 
            'comentarios', 'interacciones', 'fechas_horas', 'eventos', 
            'participantes', 'organizadores', 'users'
        ];

        foreach ($tables as $table) {
            DB::statement("DROP TABLE IF EXISTS $table");
        }

        // 1. Crear tabla USERS
        DB::statement("
            CREATE TABLE users (
                mail VARCHAR(100) PRIMARY KEY,
                nombre VARCHAR(100) NOT NULL,
                contraseña VARCHAR(255) NOT NULL,
                created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
            )
        ");

        // 2. Crear tabla ORGANIZADORES
        DB::statement("
            CREATE TABLE organizadores (
                mail VARCHAR(100) PRIMARY KEY,
                contacto VARCHAR(200) NOT NULL,
                created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (mail) REFERENCES users(mail) ON DELETE CASCADE
            )
        ");

        // 3. Crear tabla PARTICIPANTES
        DB::statement("
            CREATE TABLE participantes (
                mail VARCHAR(100) PRIMARY KEY,
                created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (mail) REFERENCES users(mail) ON DELETE CASCADE
            )
        ");

        // Reactivar verificaciones de claves foráneas
        DB::statement('SET FOREIGN_KEY_CHECKS=1');

        $this->command->info('✅ Base de datos inicializada con TU estructura exacta');
    }
}
Ejecutar el seeder:

bash
php artisan db:seed --class=DatabaseInitializer
Opción 3: Instalar mysql-client en tu contenedor
bash
# Instalar mysql-client
apt-get update
apt-get install -y mysql-client

# Ahora probar conexión
mysql -h mysql -u root -p event_organizer
Verificación:
bash
# Verificar que las tablas se crearon
php artisan tinker
>>> DB::select('SHOW TABLES');
Te recomiendo la Opción 2 (Seeder) porque es más limpia y reproducible. ¿Qué opción prefieres que implementemos?

pero yo tengo mysql dentro del contenedor de doker
¡Tienes razón! Si MySQL está en otro contenedor de Docker, necesitamos conectarnos a él. Veamos cómo hacerlo:

1. Primero, descubre el nombre del contenedor MySQL
bash
# Ver todos los contenedores en ejecución
docker ps

# Deberías ver algo como:
# CONTAINER ID   IMAGE          COMMAND                  NAMES
# abc123        mysql:8.0      "docker-entrypoint.s…"   proyecto-mysql
# def456        laravel-app    "docker-php-entrypoi…"   laravel-app
2. Conectarte al contenedor MySQL
bash
# Conectarte al contenedor MySQL
docker exec -it nombre_contenedor_mysql mysql -u root -p

# Ejemplo:
docker exec -it proyecto-mysql mysql -u root -p
3. O instalar mysql-client en tu contenedor Laravel
bash
# Instalar mysql-client en tu contenedor actual
apt-get update
apt-get install -y mysql-client

# Ahora conectarte al contenedor MySQL
mysql -h nombre_contenedor_mysql -u root -p

# Ejemplo:
mysql -h proyecto-mysql -u root -p
4. Solución más fácil: Usar Artisan Tinker
Dentro de tu contenedor Laravel, usa Artisan Tinker para ejecutar SQL directamente:

bash
# Abrir Tinker
php artisan tinker
Dentro de Tinker, ejecuta estos comandos:

php
// 1. Eliminar todas las tablas existentes
DB::statement('DROP TABLE IF EXISTS prefiere, categoria_evento, categorias, crea, comentarios, interacciones, fechas_horas, eventos, participantes, organizadores, users');

// 2. Crear tabla USERS con TU estructura exacta
DB::statement("
    CREATE TABLE users (
        mail VARCHAR(100) PRIMARY KEY,
        nombre VARCHAR(100) NOT NULL,
        contraseña VARCHAR(255) NOT NULL,
        created_at TIMESTAMP NULL,
        updated_at TIMESTAMP NULL
    )
");

// 3. Crear tabla ORGANIZADORES
DB::statement("
    CREATE TABLE organizadores (
        mail VARCHAR(100) PRIMARY KEY,
        contacto VARCHAR(200) NOT NULL,
        created_at TIMESTAMP NULL,
        updated_at TIMESTAMP NULL,
        FOREIGN KEY (mail) REFERENCES users(mail) ON DELETE CASCADE
    )
");

// 4. Crear tabla PARTICIPANTES
DB::statement("
    CREATE TABLE participantes (
        mail VARCHAR(100) PRIMARY KEY,
        created_at TIMESTAMP NULL,
        updated_at TIMESTAMP NULL,
        FOREIGN KEY (mail) REFERENCES users(mail) ON DELETE CASCADE
    )
");

// 5. Verificar que se crearon las tablas
DB::select('SHOW TABLES');
5. O crear un Seeder como te mostré anteriormente
Esta es la mejor opción porque es reproducible:

bash
php artisan make:seeder InitDatabaseSeeder
Ejecutar:

bash
php artisan db:seed --class=InitDatabaseSeeder
6. Verificar la conexión a MySQL
bash
# Probar la conexión desde Laravel
php artisan tinker
>>> DB::connection()->getPdo();
¿Cuál es el nombre de tu contenedor MySQL? Puedo ayudarte a conectarte específicamente. También verifica que en tu .env tengas la configuración correcta:

env
DB_HOST=nombre_contenedor_mysql
DB_PORT=3306
DB_DATABASE=event_organizer
DB_USERNAME=root
DB_PASSWORD=tu_password
¿Qué opción prefieres que probemos primero?

NAMES
67ce1556886e   practica-docker-app   "docker-php-entrypoi…"   2 hours ago   Up 2 hours   0.0.0.0:8000->80/tcp, [::]:8000->80/tcp       practica-docker-app-1
14940feb93ea   mysql:8.0             "docker-entrypoint.s…"   2 hours ago   Up 2 hours   0.0.0.0:3307->3306/tcp, [::]:3307->3306/tcp   practica-docker-mysql-1
¡Perfecto! Ya veo tus contenedores. El contenedor MySQL se llama practica-docker-mysql-1. Ahora podemos conectarnos fácilmente.

1. Conectarse al contenedor MySQL
bash
# Conectarte directamente al contenedor MySQL
docker exec -it practica-docker-mysql-1 mysql -u root -p
2. O instalar mysql-client y conectarse
bash
# Instalar mysql-client en tu contenedor Laravel
apt-get update
apt-get install -y mysql-client

# Conectarte al contenedor MySQL desde Laravel
mysql -h practica-docker-mysql-1 -u root -p
3. Verificar la configuración del .env
Asegúrate de que tu archivo .env tenga la configuración correcta:

env
DB_CONNECTION=mysql
DB_HOST=practica-docker-mysql-1
DB_PORT=3306
DB_DATABASE=event_organizer
DB_USERNAME=root
DB_PASSWORD=tu_password_mysql
4. Solución RÁPIDA con Artisan Tinker
Dentro de tu contenedor Laravel (practica-docker-app-1):

bash
# Ejecutar Tinker
php artisan tinker
En Tinker, ejecuta estos comandos SQL:

php
// 1. Eliminar TODAS las tablas existentes
DB::statement('SET FOREIGN_KEY_CHECKS=0');
DB::statement('DROP TABLE IF EXISTS migrations, prefiere, categoria_evento, categorias, crea, comentarios, interacciones, fechas_horas, eventos, participantes, organizadores, users');
DB::statement('SET FOREIGN_KEY_CHECKS=1');

// 2. Crear tabla USERS con TU estructura exacta
DB::statement("
    CREATE TABLE users (
        mail VARCHAR(100) PRIMARY KEY,
        nombre VARCHAR(100) NOT NULL,
        contraseña VARCHAR(255) NOT NULL,
        created_at TIMESTAMP NULL,
        updated_at TIMESTAMP NULL
    )
");

// 3. Crear tabla ORGANIZADORES
DB::statement("
    CREATE TABLE organizadores (
        mail VARCHAR(100) PRIMARY KEY,
        contacto VARCHAR(200) NOT NULL,
        created_at TIMESTAMP NULL,
        updated_at TIMESTAMP NULL,
        FOREIGN KEY (mail) REFERENCES users(mail) ON DELETE CASCADE
    )
");

// 4. Crear tabla PARTICIPANTES
DB::statement("
    CREATE TABLE participantes (
        mail VARCHAR(100) PRIMARY KEY,
        created_at TIMESTAMP NULL,
        updated_at TIMESTAMP NULL,
        FOREIGN KEY (mail) REFERENCES users(mail) ON DELETE CASCADE
    )
");

// 5. Verificar que se crearon las tablas
print_r(DB::select('SHOW TABLES'));
5. Crear las demás tablas
Continúa en Tinker con el resto de tablas:

php
// 6. Crear tabla EVENTOS
DB::statement("
    CREATE TABLE eventos (
        id_evento INT AUTO_INCREMENT PRIMARY KEY,
        titulo VARCHAR(200) NOT NULL,
        ubicacion VARCHAR(200),
        descripcion TEXT,
        created_at TIMESTAMP NULL,
        updated_at TIMESTAMP NULL
    )
");

// 7. Crear tabla FECHAS_HORAS
DB::statement("
    CREATE TABLE fechas_horas (
        id INT AUTO_INCREMENT PRIMARY KEY,
        id_evento INT,
        fechaHora DATETIME NOT NULL,
        created_at TIMESTAMP NULL,
        updated_at TIMESTAMP NULL,
        FOREIGN KEY (id_evento) REFERENCES eventos(id_evento) ON DELETE CASCADE,
        UNIQUE KEY (id_evento, fechaHora)
    )
");

// Continuar con las demás tablas según tu diseño...
6. Verificar que todo funciona
bash
# Probar la conexión
php artisan tinker
>>> DB::select('SHOW TABLES');
>>> DB::table('users')->get();
¿Quieres que continuemos creando el resto de tablas con SQL directo o prefieres que lo hagamos mediante migraciones una vez que tengamos la base de datos limpia?

la base de datos de laravel esa la cre cuando teermine de instalar laravel 12 ahora quiero crear la base de datos qu te di pero me da error eso puede ser el problema ?

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| laravel            |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
¡Ese es exactamente el problema! Tienes una base de datos llamada laravel pero tu proyecto está intentando usar una base de datos llamada event_organizer (o similar).

Solución:
1. Primero, crea la base de datos correcta
Desde el contenedor MySQL:

sql
CREATE DATABASE event_organizer;
O desde tu contenedor Laravel:

bash
mysql -h practica-docker-mysql-1 -u root -p -e "CREATE DATABASE event_organizer;"
2. Actualiza tu archivo .env
Asegúrate de que apunte a la base de datos correcta:

env
DB_CONNECTION=mysql
DB_HOST=practica-docker-mysql-1
DB_PORT=3306
DB_DATABASE=event_organizer  # ← ¡ESTE ES EL CAMBIO IMPORTANTE!
DB_USERNAME=root
DB_PASSWORD=tu_password
3. Ahora limpia TODO y empieza desde cero
bash
# Eliminar todas las migraciones problemáticas
php artisan migrate:reset

# Limpiar cache de configuración
php artisan config:clear
php artisan cache:clear

# Verificar la conexión a la nueva base de datos
php artisan tinker
>>> DB::connection()->getPdo();
4. Crear SOLO las migraciones de TU estructura
Primero crea la migración de users:

bash
php artisan make:migration create_users_table
database/migrations/xxxx_create_users_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->string('mail', 100)->primary();
            $table->string('nombre', 100);
            $table->string('contraseña');
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('users');
    }
};
5. Ejecutar SOLO esta migración primero
bash
php artisan migrate
6. Si sigue fallando, usa el approach DIRECTO con Tinker
bash
php artisan tinker
php
// 1. Seleccionar la base de datos correcta
DB::statement('USE event_organizer');

// 2. Eliminar tabla users si existe
DB::statement('DROP TABLE IF EXISTS users');

// 3. Crear tabla USERS con TU estructura
DB::statement("
    CREATE TABLE users (
        mail VARCHAR(100) PRIMARY KEY,
        nombre VARCHAR(100) NOT NULL,
        contraseña VARCHAR(255) NOT NULL,
        created_at TIMESTAMP NULL,
        updated_at TIMESTAMP NULL
    )
");

// 4. Verificar
print_r(DB::select('SHOW TABLES'));
¿Qué base de datos quieres usar exactamente? ¿event_organizer o otra? Dime el nombre exacto para ajustar el .env correctamente.

mysql> CREATE DATABASE event_organizer;
Query OK, 1 row affected (0.26 sec)

mysql> exit
Bye
PS C:\practica-docker> docker exec -it practica-docker-app-1 bash
root@67ce1556886e:/var/www/html# 
ahora si podria crear las migraciones como me las diste ya cambien el .env correctamente
¡Excelente! Ahora sí tenemos la base de datos correcta event_organizer y el .env configurado adecuadamente.

Vamos a crear las migraciones paso a paso:
1. Primero verifica que el .env esté correcto:
bash
cat .env | grep DB_
Debería mostrar:

text
DB_CONNECTION=mysql
DB_HOST=practica-docker-mysql-1
DB_PORT=3306
DB_DATABASE=event_organizer
DB_USERNAME=root
DB_PASSWORD=tu_password
2. Limpia cualquier migración previa:
bash
# Eliminar migraciones anteriores si existen
rm -f database/migrations/*.php

# Limpiar cache
php artisan config:clear
php artisan cache:clear
3. Crear las migraciones EN ORDEN:
Migración 1: Users (tu estructura exacta)

bash
php artisan make:migration create_users_table
database/migrations/xxxx_create_users_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->string('mail', 100)->primary();
            $table->string('nombre', 100);
            $table->string('contraseña');
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('users');
    }
};
Migración 2: Organizadores

bash
php artisan make:migration create_organizadores_table
database/migrations/xxxx_create_organizadores_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('organizadores', function (Blueprint $table) {
            $table->string('mail', 100)->primary();
            $table->string('contacto', 200);
            $table->timestamps();
            
            $table->foreign('mail')->references('mail')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('organizadores');
    }
};
Migración 3: Participantes

bash
php artisan make:migration create_participantes_table
database/migrations/xxxx_create_participantes_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('participantes', function (Blueprint $table) {
            $table->string('mail', 100)->primary();
            $table->timestamps();
            
            $table->foreign('mail')->references('mail')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('participantes');
    }
};
4. Ejecutar las migraciones EN ORDEN:
bash
# Ejecutar solo la primera migración
php artisan migrate --path=database/migrations/xxxx_create_users_table.php

# Luego la segunda
php artisan migrate --path=database/migrations/xxxx_create_organizadores_table.php

# Luego la tercera
php artisan migrate --path=database/migrations/xxxx_create_participantes_table.php
5. Verificar que se crearon correctamente:
bash
php artisan tinker
>>> DB::select('SHOW TABLES');
>>> DB::table('users')->get();
6. Si todo funciona, crear el resto de migraciones:
Sigue el mismo patrón para las demás tablas:

eventos

fechas_horas

interacciones

comentarios

crea

categorias

categoria_evento

prefiere

¡Ahora sí debería funcionar! Tenemos:

✅ Base de datos correcta: event_organizer

✅ .env configurado adecuadamente

✅ Migraciones con TU estructura exacta

✅ Orden de ejecución correcto

¿Quieres que continuemos con las migraciones de las demás tablas?

mysql> CREATE DATABASE event_organizer;
Query OK, 1 row affected (0.26 sec)

mysql> exit
Bye
PS C:\practica-docker> docker exec -it practica-docker-app-1 bash
root@67ce1556886e:/var/www/html# php artisan migrate

   INFO  Preparing database.

  Creating migration table ................................................................. 1s DONE

   INFO  Running migrations.  

  0001_01_01_000000_create_users_table ..................................................... 8s DONE
  0001_01_01_000001_create_cache_table ..................................................... 3s DONE
  0001_01_01_000002_create_jobs_table ...................................................... 8s DONE
  2025_08_25_190737_create_organizadores_table ............................................. 1s FAIL

   Illuminate\Database\QueryException 

  SQLSTATE[HY000]: General error: 3734 Failed to add the foreign key constraint. Missing column 'mail' for constraint 'organizadores_mail_foreign' in the referenced table 'users' (Connection: mysql, SQL: 
alter table `organizadores` add constraint `organizadores_mail_foreign` foreign key (`mail`) references `users` (`mail`) on delete cascade)

  at vendor/laravel/framework/src/Illuminate/Database/Connection.php:824
    820▕                     $this->getName(), $query, $this->prepareBindings($bindings), $e
    821▕                 );
    822▕             }
    823▕ 
  ➜ 824▕             throw new QueryException(
    825▕                 $this->getName(), $query, $this->prepareBindings($bindings), $e
    826▕             );
    827▕         }
    828▕     }

      +9 vendor frames

  10  database/migrations/2025_08_25_190737_create_organizadores_table.php:14
      Illuminate\Support\Facades\Facade::__callStatic("create")
      +26 vendor frames

  37  artisan:16
      Illuminate\Foundation\Application::handleCommand(Object(Symfony\Component\Console\Input\ArgvInput))

root@67ce1556886e:/var/www/html# 
las migraciones que me distes no anda nunca borre la bd cree la enventos corregi el .env 
v
¡Ahora veo el problema! Laravel está ejecutando SUS migraciones por defecto primero (las que crean la tabla users con la estructura por defecto) y LUEGO tus migraciones personalizadas.

Solución DEFINITIVA:
1. Eliminar TODAS las migraciones por defecto de Laravel:
bash
# Buscar y eliminar migraciones por defecto
rm database/migrations/0001_01_01_000000_create_users_table.php
rm database/migrations/0001_01_01_000001_create_cache_table.php
rm database/migrations/0001_01_01_000002_create_jobs_table.php

# Eliminar también la tabla de migraciones
php artisan tinker
>>> DB::statement('DROP TABLE IF EXISTS migrations');
2. Crear SOLO tus migraciones personalizadas:
Migración 1: Users (TU estructura)

bash
php artisan make:migration create_users_table
database/migrations/2025_01_01_000000_create_users_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->string('mail', 100)->primary();
            $table->string('nombre', 100);
            $table->string('contraseña');
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('users');
    }
};
3. Crear la migración de organizadores:
database/migrations/2025_01_01_000001_create_organizadores_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('organizadores', function (Blueprint $table) {
            $table->string('mail', 100)->primary();
            $table->string('contacto', 200);
            $table->timestamps();
            
            $table->foreign('mail')->references('mail')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('organizadores');
    }
};
4. EJECUTAR en ORDEN manualmente:
bash
# Primero ejecutar SOLO la migración de users
php artisan migrate --path=database/migrations/2025_01_01_000000_create_users_table.php

# Verificar que se creó correctamente
php artisan tinker
>>> DB::select('DESCRIBE users');

# Luego ejecutar SOLO la migración de organizadores
php artisan migrate --path=database/migrations/2025_01_01_000001_create_organizadores_table.php
5. Si sigue fallando, solución RADICAL:
bash
# Eliminar TODAS las tablas manualmente
php artisan tinker
>>> DB::statement('DROP DATABASE event_organizer');
>>> DB::statement('CREATE DATABASE event_organizer');

# Crear manualmente la tabla users
>>> DB::statement("
    CREATE TABLE users (
        mail VARCHAR(100) PRIMARY KEY,
        nombre VARCHAR(100) NOT NULL,
        contraseña VARCHAR(255) NOT NULL,
        created_at TIMESTAMP NULL,
        updated_at TIMESTAMP NULL
    )
");

# Y LUEGO ejecutar las migraciones
php artisan migrate
6. Verificar la estructura de la tabla users:
bash
php artisan tinker
>>> DB::select("DESCRIBE users");
¡El problema es que Laravel está creando la tabla users con su estructura por defecto! Debemos eliminar completamente sus migraciones por defecto.

¿Quieres que probemos con la solución radical de crear la base de datos manualmente?

las migraciones segun la bd que te di hay que crearlas en un orden para que pueda crearl la bd sin errores dame todo el codigo completo para crear esa base de datos sin ningun error
¡Tienes toda la razón! Voy a crear TODAS las migraciones en el orden correcto para evitar errores de claves foráneas.

1. Primero, limpiamos TODO completamente
bash
# Eliminar todas las migraciones existentes
rm -f database/migrations/*.php

# Limpiar cache
php artisan config:clear
php artisan cache:clear

# Eliminar y recrear la base de datos
php artisan tinker
>>> DB::statement('DROP DATABASE IF EXISTS event_organizer');
>>> DB::statement('CREATE DATABASE event_organizer');
>>> exit
2. Crear las migraciones en ORDEN CORRECTO
Migración 1: Users (primera porque no depende de nadie)
bash
php artisan make:migration 0001_create_users_table
database/migrations/0001_create_users_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->string('mail', 100)->primary();
            $table->string('nombre', 100);
            $table->string('contraseña');
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('users');
    }
};
Migración 2: Organizadores (depende de users)
bash
php artisan make:migration 0002_create_organizadores_table
database/migrations/0002_create_organizadores_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('organizadores', function (Blueprint $table) {
            $table->string('mail', 100)->primary();
            $table->string('contacto', 200);
            $table->timestamps();
            
            $table->foreign('mail')->references('mail')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('organizadores');
    }
};
Migración 3: Participantes (depende de users)
bash
php artisan make:migration 0003_create_participantes_table
database/migrations/0003_create_participantes_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('participantes', function (Blueprint $table) {
            $table->string('mail', 100)->primary();
            $table->timestamps();
            
            $table->foreign('mail')->references('mail')->on('users')->onDelete('cascade');
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('participantes');
    }
};
Migración 4: Eventos (no depende de claves foráneas)
bash
php artisan make:migration 0004_create_eventos_table
database/migrations/0004_create_eventos_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('eventos', function (Blueprint $table) {
            $table->id('id_evento');
            $table->string('titulo', 200);
            $table->string('ubicacion', 200);
            $table->text('descripcion');
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('eventos');
    }
};
Migración 5: Fechas_Horas (depende de eventos)
bash
php artisan make:migration 0005_create_fechas_horas_table
database/migrations/0005_create_fechas_horas_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('fechas_horas', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('id_evento');
            $table->dateTime('fechaHora');
            $table->timestamps();
            
            $table->foreign('id_evento')->references('id_evento')->on('eventos')->onDelete('cascade');
            $table->unique(['id_evento', 'fechaHora']);
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('fechas_horas');
    }
};
Migración 6: Categorias (no depende de nadie)
bash
php artisan make:migration 0006_create_categorias_table
database/migrations/0006_create_categorias_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('categorias', function (Blueprint $table) {
            $table->id('id_categoria');
            $table->string('nombreCategoria', 100);
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('categorias');
    }
};
Migración 7: Interacciones (depende de eventos y users)
bash
php artisan make:migration 0007_create_interacciones_table
database/migrations/0007_create_interacciones_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('interacciones', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('id_evento');
            $table->string('mail', 100);
            $table->text('comentarios')->nullable();
            $table->integer('puntaje')->nullable();
            $table->boolean('visitado')->default(false);
            $table->timestamps();
            
            $table->foreign('id_evento')->references('id_evento')->on('eventos')->onDelete('cascade');
            $table->foreign('mail')->references('mail')->on('users')->onDelete('cascade');
            $table->unique(['id_evento', 'mail']);
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('interacciones');
    }
};
Migración 8: Comentarios (depende de eventos y users)
bash
php artisan make:migration 0008_create_comentarios_table
database/migrations/0008_create_comentarios_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('comentarios', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('id_evento');
            $table->string('mail', 100);
            $table->text('comentario');
            $table->timestamps();
            
            $table->foreign('id_evento')->references('id_evento')->on('eventos')->onDelete('cascade');
            $table->foreign('mail')->references('mail')->on('users')->onDelete('cascade');
            $table->unique(['id_evento', 'mail', 'comentario']);
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('comentarios');
    }
};
Migración 9: Crea (depende de eventos y organizadores)
bash
php artisan make:migration 0009_create_crea_table
database/migrations/0009_create_crea_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('crea', function (Blueprint $table) {
            $table->unsignedBigInteger('id_evento');
            $table->string('mail', 100);
            $table->timestamps();
            
            $table->foreign('id_evento')->references('id_evento')->on('eventos')->onDelete('cascade');
            $table->foreign('mail')->references('mail')->on('organizadores')->onDelete('cascade');
            $table->primary(['id_evento', 'mail']);
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('crea');
    }
};
Migración 10: Categoria_Evento (depende de categorias y eventos)
bash
php artisan make:migration 0010_create_categoria_evento_table
database/migrations/0010_create_categoria_evento_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('categoria_evento', function (Blueprint $table) {
            $table->unsignedBigInteger('id_categoria');
            $table->unsignedBigInteger('id_evento');
            $table->timestamps();
            
            $table->foreign('id_categoria')->references('id_categoria')->on('categorias')->onDelete('cascade');
            $table->foreign('id_evento')->references('id_evento')->on('eventos')->onDelete('cascade');
            $table->primary(['id_categoria', 'id_evento']);
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('categoria_evento');
    }
};
Migración 11: Prefiere (depende de users y categorias)
bash
php artisan make:migration 0011_create_prefiere_table
database/migrations/0011_create_prefiere_table.php:

php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('prefiere', function (Blueprint $table) {
            $table->string('mail', 100);
            $table->unsignedBigInteger('id_categoria');
            $table->timestamps();
            
            $table->foreign('mail')->references('mail')->on('users')->onDelete('cascade');
            $table->foreign('id_categoria')->references('id_categoria')->on('categorias')->onDelete('cascade');
            $table->primary(['mail', 'id_categoria']);
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('prefiere');
    }
};
3. Ejecutar las migraciones en ORDEN
bash
# Ejecutar TODAS las migraciones en el orden correcto
php artisan migrate

# Verificar que todo se creó
php artisan tinker
>>> DB::select('SHOW TABLES');
¡Este orden garantiza que no habrá errores de claves foráneas! Las tablas se crean en el orden de dependencia.

PS C:\practica-docker> mysql -u root -p 
como accedo a mi contenedor de mysq
Para acceder a tu contenedor de MySQL, debes usar el comando correcto ya que mysql no está instalado en tu sistema local. Aquí te explico cómo:

1. Acceder al contenedor MySQL directamente
bash
# Conectarte al contenedor MySQL usando docker exec
docker exec -it practica-docker-mysql-1 mysql -u root -p
2. O instalar mysql-client en tu máquina local
Si prefieres tener mysql en tu Windows:

bash
# Instalar MySQL Client en Windows (si no lo tienes)
# Descargar desde: https://dev.mysql.com/downloads/mysql/
# O usar Chocolatey: choco install mysql-cli

# Luego conectar directamente al contenedor
mysql -h localhost -P 3307 -u root -p
3. Usar desde el contenedor de la app
bash
# Primero acceder al contenedor de Laravel
docker exec -it practica-docker-app-1 bash

# Luego instalar mysql-client dentro del contenedor
apt-get update
apt-get install -y mysql-client

# Finalmente conectarte al contenedor MySQL
mysql -h practica-docker-mysql-1 -u root -p
4. Verificar la conexión desde Laravel
bash
# Desde tu contenedor de Laravel
php artisan tinker

# Probar la conexión
>>> DB::connection()->getPdo();
>>> DB::select('SHOW DATABASES');
5. **Comandos útiles una vez
>>
CONTAINER ID   IMAGE                 COMMAND                  CREATED       STATUS       PORTS        
                                 NAMES
67ce1556886e   practica-docker-app   "docker-php-entrypoi…"   8 hours ago   Up 8 hours   0.0.0.0:8000->80/tcp, [::]:8000->80/tcp       practica-docker-app-1
14940feb93ea   mysql:8.0             "docker-entrypoint.s…"   8 hours ago   Up 8 hours   0.0.0.0:3307->3306/tcp, [::]:3307->3306/tcp   practica-docker-mysql-1
¡Perfecto! Ya veo tus contenedores. El contenedor MySQL es practica-docker-mysql-1. Aquí te explico cómo acceder:

1. Acceder directamente al contenedor MySQL
bash
# Usar docker exec para conectarte directamente a MySQL
docker exec -it practica-docker-mysql-1 mysql -u root -p
2. Desde tu contenedor Laravel
bash
# Primero acceder al contenedor de la app
docker exec -it practica-docker-app-1 bash

# Luego instalar mysql-client (si no está instalado)
apt-get update
apt-get install -y mysql-client

# Conectarte al contenedor MySQL
mysql -h practica-docker-mysql-1 -u root -p
3. Desde tu Windows local (puerto 3307)
bash
# Si tienes MySQL Client instalado en Windows
mysql -h localhost -P 3307 -u root -p
4. Comandos útiles una vez conectado
sql
-- Ver todas las bases de datos
SHOW DATABASES;

-- Usar la base de datos event_organizer
USE event_organizer;

-- Ver todas las tablas
SHOW TABLES;

-- Ver estructura de una tabla
DESCRIBE users;

-- Ver datos de una tabla
SELECT * FROM users;
5. Verificar desde Laravel
bash
# Desde tu contenedor de la app
php artisan tinker

# Probar conexión y ver tablas
>>> DB::select('SHOW DATABASES');
>>> DB::select('SHOW TABLES');
>>> DB::table('users')->get();
6. Si necesitas reiniciar completamente
bash
# Eliminar y recrear la base de datos desde Laravel
php artisan tinker
>>> DB::statement('DROP DATABASE IF EXISTS event_organizer');
>>> DB::statement('CREATE DATABASE event_organizer');
>>> exit

# Luego ejecutar migraciones
php artisan migrate
¿Qué método prefieres usar? El más directo es:

bash
docker exec -it practica-docker-mysql-1 mysql -u root -p
¡Así accederás directamente a tu MySQL!

docker exec -it practica-docker-mysql-1 mysql -u root -p 
con est comando accedi como borro las databases para recrearlas
¡Perfecto! Una vez que accedas a MySQL con ese comando, aquí te muestro cómo borrar y recrear las bases de datos:

Dentro de MySQL, ejecuta estos comandos:
sql
-- 1. Ver todas las bases de datos existentes
SHOW DATABASES;

-- 2. Eliminar la base de datos event_organizer si existe
DROP DATABASE IF EXISTS event_organizer;

-- 3. Eliminar la base de datos laravel si existe  
DROP DATABASE IF EXISTS laravel;

-- 4. Crear la base de datos event_organizer con encoding correcto
CREATE DATABASE event_organizer CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- 5. Verificar que se creó correctamente
SHOW DATABASES;

-- 6. Seleccionar la base de datos para usar
USE event_organizer;

-- 7. Salir de MySQL
EXIT;
Comandos completos en secuencia:
sql
SHOW DATABASES;
DROP DATABASE IF EXISTS event_organizer;
DROP DATABASE IF EXISTS laravel;
CREATE DATABASE event_organizer CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
SHOW DATABASES;
EXIT;
También puedes hacerlo desde una línea de comando:
bash
# Ejecutar comandos SQL directamente sin entrar interactivamente
docker exec -i practica-docker-mysql-1 mysql -u root -p -e "DROP DATABASE IF EXISTS event_organizer; DROP DATABASE IF EXISTS laravel; CREATE DATABASE event_organizer CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; SHOW DATABASES;"
Después de recrear la base de datos:
Verifica que tu .env esté correcto:

env
DB_CONNECTION=mysql
DB_HOST=practica-docker-mysql-1
DB_PORT=3306
DB_DATABASE=event_organizer
DB_USERNAME=root
DB_PASSWORD=tu_password
Ejecuta las migraciones:

bash
php artisan migrate
Verifica que todo funcionó:

bash
php artisan tinker
>>> DB::select('SHOW TABLES');
¡Así te aseguras de empezar completamente desde cero con una base de datos limpia! ¿Necesitas que te ayude con algún paso específico?

